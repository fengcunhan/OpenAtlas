apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

java.util.Properties properties = new java.util.Properties()
if(file(project.rootDir.getAbsolutePath()+File.separator+'local.properties').exists()){
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}else{

    println "local.properties not found ,disable deploy"
}
ext {
    bintrayRepo = 'OpenAtlas'
    bintrayName = 'OpenAtlasCore'

    publishedGroupId = 'com.openatlas'
    libraryName = 'OpenAtlasCore'
    artifact = 'OpenAtlasCore'

    libraryDescription = 'Android Plugin Framework base on OSGI'

    siteUrl = 'https://github.com/bunnyblue/OpenAtlas'
    gitUrl = 'https://github.com/bunnyblue/OpenAtlas.git'

    libraryVersion = properties.getProperty("coreVersion")

    developerId = 'bunnyblue'
    developerName = 'Bunny Blue'
    developerEmail = 'bunnyblueair@gmail.com'

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'https://raw.githubusercontent.com/bunnyblue/OpenAtlas/master/LICENSE'
    allLicenses = ["MIT"]
}
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    defaultConfig {
        def  coreVersion="\"dev-snapshot\""
        if (properties.containsKey("coreVersion")) {
            coreVersion= "\""+properties.getProperty("coreVersion")+"\""
        }
        buildConfigField "String", "OpenAtlasCoreVersion",coreVersion
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs'
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }


}
group = ext.publishedGroupId
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}



version = ext.libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray


bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
