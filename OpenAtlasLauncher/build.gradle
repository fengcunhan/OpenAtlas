apply plugin: 'com.android.application'


dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':OpenAtlasCore')

}
def openAtlasGitVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'//, '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return "UnKnown";
    }
}
def openAtlasGitVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {//git rev-list --count HEAD
            commandLine 'git', 'rev-list','--count','HEAD'//, '--first-parent', '--count', 'master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return 0;
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    defaultConfig {
        versionCode openAtlasGitVersionCode()
        versionName openAtlasGitVersionName()

    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs'
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}
task openAtlasWrapBundle << {

    javaexec {
        classpath "$projectDir/OpenAtlasBundleMaker.jar"
        main = 'com.openAtlas.bundleInfo.maker.BundleMakeBooter'
        args "$projectDir/libs/armeabi".toString(), "$projectDir/assets/bundle-info.json".toString(),"$projectDir/.bundleCache"
    }
}
assembleDebug.dependsOn(openAtlasWrapBundle)
assembleRelease.dependsOn(openAtlasWrapBundle)